# bot.py
import logging
import os
import requests
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === C·∫§U H√åNH ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")  # API th·ªùi ti·∫øt t·ª´ OpenWeatherMap
EXCHANGE_API_URL = "https://api.exchangerate.host/latest?base=THB&symbols=VND"  # API t·ª∑ gi√° THB-VND

# === GHI LOG ===
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# === C√ÅC L·ªÜNH ===
async def bat_dau(update: Update, context: ContextTypes.DEFAULT_TYPE):
    thong_diep = (
        "ü§ñ Xin ch√†o! T√¥i l√† tr·ª£ l√Ω Telegram h·ªó tr·ª£ cu·ªôc s·ªëng t·∫°i Bangkok üáπüá≠\n\n"
        "C√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:\n"
        "/weather - Xem th·ªùi ti·∫øt h√¥m nay\n"
        "/exchange - T·ª∑ gi√° THB ‚Üí VND\n"
        "/quote - C√¢u n√≥i truy·ªÅn ƒë·ªông l·ª±c\n"
        "/food - G·ª£i √Ω m√≥n ƒÉn s√°ng\n"
        "/translate <n·ªôi dung> - D·ªãch TH-VI-EN\n"
        "/remind <n·ªôi dung> - Nh·∫Øc vi·ªác (gi·∫£ l·∫≠p)\n"
        "/note <ghi ch√∫> - Ghi ch√∫ nhanh"
    )
    await update.message.reply_text(thong_diep)

async def thoi_tiet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.openweathermap.org/data/2.5/weather?q=Bangkok&appid={WEATHER_API_KEY}&units=metric"
    res = requests.get(url).json()
    mo_ta = res['weather'][0]['description'].capitalize()
    nhiet_do = res['main']['temp']
    ket_qua = f"üå§Ô∏è Th·ªùi ti·∫øt Bangkok: {mo_ta}, {nhiet_do}¬∞C"
    await update.message.reply_text(ket_qua)

async def ty_gia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    res = requests.get(EXCHANGE_API_URL).json()
    gia = res['rates']['VND']
    ket_qua = f"üí± 100 THB ‚âà {int(gia*100):,} VND"
    await update.message.reply_text(ket_qua)

async def cau_noi_truyen_dong_luc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {"Authorization": f"Bearer {GEMINI_API_KEY}"}
    noi_dung = {"contents": [{"parts": [{"text": "Give me one short motivational quote in English."}]}]}
    res = requests.post("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent", json=noi_dung, headers=headers)
    trich_dan = res.json()["candidates"][0]["content"]["parts"][0]["text"]
    await update.message.reply_text(f"‚ú® {trich_dan}")

async def goi_y_mon_an(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {"Authorization": f"Bearer {GEMINI_API_KEY}"}
    noi_dung = {"contents": [{"parts": [{"text": "Suggest one Thai breakfast dish with short description."}]}]}
    res = requests.post("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent", json=noi_dung, headers=headers)
    mon_an = res.json()["candidates"][0]["content"]["parts"][0]["text"]
    await update.message.reply_text(f"üçú {mon_an}")

async def dich_ngon_ngu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ d·ªãch. V√≠ d·ª•: /translate Xin ch√†o")
    van_ban = ' '.join(context.args)
    headers = {"Authorization": f"Bearer {GEMINI_API_KEY}"}
    prompt = f"Translate this between Thai, Vietnamese, and English automatically: {van_ban}"
    body = {"contents": [{"parts": [{"text": prompt}]}]}
    res = requests.post("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent", json=body, headers=headers)
    ket_qua = res.json()["candidates"][0]["content"]["parts"][0]["text"]
    await update.message.reply_text(ket_qua)

async def nhac_viec(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cong_viec = ' '.join(context.args)
    if not cong_viec:
        return await update.message.reply_text("Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn nh·∫Øc. V√≠ d·ª•: /remind h·ªçp l√∫c 2 gi·ªù chi·ªÅu")
    await update.message.reply_text(f"‚è∞ ƒê√£ l∆∞u l·ªùi nh·∫Øc: {cong_viec} (demo, ch∆∞a l∆∞u th·∫≠t)")

async def ghi_chu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    noi_dung = ' '.join(context.args)
    if not noi_dung:
        return await update.message.reply_text("Vui l√≤ng nh·∫≠p ghi ch√∫. V√≠ d·ª•: /note G·ªçi m·∫π")
    await update.message.reply_text(f"üìù ƒê√£ l∆∞u ghi ch√∫: {noi_dung} (demo, ch∆∞a l∆∞u th·∫≠t)")

# === KH·ªûI ƒê·ªòNG BOT ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", bat_dau))
    app.add_handler(CommandHandler("weather", thoi_tiet))
    app.add_handler(CommandHandler("exchange", ty_gia))
    app.add_handler(CommandHandler("quote", cau_noi_truyen_dong_luc))
    app.add_handler(CommandHandler("food", goi_y_mon_an))
    app.add_handler(CommandHandler("translate", dich_ngon_ngu))
    app.add_handler(CommandHandler("remind", nhac_viec))
    app.add_handler(CommandHandler("note", ghi_chu))

    app.bot.set_my_commands([
        BotCommand("start", "Kh·ªüi ƒë·ªông bot"),
        BotCommand("weather", "Th·ªùi ti·∫øt Bangkok"),
        BotCommand("exchange", "T·ª∑ gi√° THB-VND"),
        BotCommand("quote", "C√¢u n√≥i truy·ªÅn ƒë·ªông l·ª±c"),
        BotCommand("food", "G·ª£i √Ω m√≥n ƒÉn s√°ng"),
        BotCommand("translate", "D·ªãch ng√¥n ng·ªØ"),
        BotCommand("remind", "Nh·∫Øc vi·ªác"),
        BotCommand("note", "Ghi ch√∫")
    ])

    print("Bot ƒëang ch·∫°y...")
    app.run_polling()
